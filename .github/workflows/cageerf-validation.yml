name: CAGEERF Framework Validation

on:
  push:
    branches: [main, develop]
    paths:
      - 'server/src/utils/cageerf-analyzer.ts'
      - 'server/src/utils/template-generator.ts'
      - 'server/src/utils/template-repository.ts'
      - 'server/src/mcp-tools/template-generation-tools.ts'
      - 'server/src/utils/semanticAnalyzer.ts'
  pull_request:
    branches: [main]
    paths:
      - 'server/src/utils/cageerf-analyzer.ts'
      - 'server/src/utils/template-generator.ts'
      - 'server/src/utils/template-repository.ts'
      - 'server/src/mcp-tools/template-generation-tools.ts'
      - 'server/src/utils/semanticAnalyzer.ts'

env:
  NODE_ENV: test

jobs:
  cageerf-framework-validation:
    name: CAGEERF Framework Deep Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
      
      - name: Install dependencies
        run: |
          cd server
          npm ci --prefer-offline --no-audit
      
      - name: Build project
        run: |
          cd server
          npm run build
      
      - name: CAGEERF Analyzer Deep Validation
        run: |
          cd server
          echo "üîç Testing CAGEERF Analyzer functionality..."
          
          node -e "
            async function testCAGEERFAnalyzer() {
              // Use dynamic imports for ES modules
              const { CAGEERFAnalyzer } = await import('./dist/utils/cageerf-analyzer.js');
              
              console.log('‚úÖ CAGEERF Analyzer imported successfully');
              
              // Test analyzer initialization
              const analyzer = new CAGEERFAnalyzer();
            console.log('‚úÖ CAGEERF Analyzer instantiated');
            
            // Test analysis functionality
            const testPrompt = 'Create a comprehensive analysis framework for evaluating user requirements and generating systematic solutions.';
            const analysis = analyzer.analyzePrompt(testPrompt);
            
            console.log('‚úÖ Analysis completed successfully');
            console.log('Framework Score:', analysis.frameworkScore);
            console.log('Overall Compliance:', analysis.overallCompliance);
            console.log('Components analyzed:', Object.keys(analysis.compliance).length);
            
            // Validate analysis structure
            if (!analysis.compliance || !analysis.frameworkScore || !analysis.overallCompliance) {
              throw new Error('Invalid analysis structure');
            }
            
            // Validate all 7 CAGEERF components
            const requiredComponents = ['context', 'analysis', 'goals', 'execution', 'evaluation', 'refinement', 'framework'];
            const analysisComponents = Object.keys(analysis.compliance);
            
            for (const component of requiredComponents) {
              if (!analysisComponents.includes(component)) {
                throw new Error(\`Missing CAGEERF component: \${component}\`);
              }
              console.log(\`‚úÖ Component '\${component}' validated\`);
            }
            
            console.log('üéâ CAGEERF Analyzer deep validation successful!');
            }
            
            testCAGEERFAnalyzer().catch(error => {
              console.error('‚ùå CAGEERF Analyzer validation failed:', error.message);
              process.exit(1);
            });
          "
      
      - name: Template Generator Validation
        run: |
          cd server
          echo "üîç Testing Template Generator functionality..."
          
          node -e "
            async function testTemplateGenerator() {
              // Use dynamic imports for ES modules
              const { TemplateGenerator } = await import('./dist/utils/template-generator.js');
              
              console.log('‚úÖ Template Generator imported successfully');
            
            // Test generator initialization
            const generator = new TemplateGenerator();
            console.log('‚úÖ Template Generator instantiated');
            
            // Test template generation
            const request = {
              useCase: 'Data Analysis Framework',
              domain: 'Business Intelligence',
              complexity: 'intermediate',
              frameworkEmphasis: {
                context: true,
                analysis: true,
                goals: true,
                execution: true,
                evaluation: true,
                refinement: true,
                framework: true
              },
              templateStyle: 'structured'
            };
            
            const template = generator.generateTemplate(request);
            
            console.log('‚úÖ Template generation completed successfully');
            console.log('Template length:', template.content.length);
            console.log('CAGEERF score:', template.cageerfScore);
            console.log('Quality metrics:', Object.keys(template.qualityMetrics).length);
            
            // Validate template structure
            if (!template.content || !template.cageerfScore || !template.qualityMetrics) {
              throw new Error('Invalid template structure');
            }
            
            // Validate template contains CAGEERF components
            const contentLower = template.content.toLowerCase();
            const cageerfKeywords = ['context', 'analysis', 'goals', 'execution', 'evaluation', 'refinement'];
            let foundComponents = 0;
            
            for (const keyword of cageerfKeywords) {
              if (contentLower.includes(keyword)) {
                foundComponents++;
                console.log(\`‚úÖ Found CAGEERF component: \${keyword}\`);
              }
            }
            
            if (foundComponents < 4) {
              throw new Error(\`Insufficient CAGEERF components in template: \${foundComponents}/6\`);
            }
            
            console.log('üéâ Template Generator validation successful!');
            }
            
            testTemplateGenerator().catch(error => {
              console.error('‚ùå Template Generator validation failed:', error.message);
              process.exit(1);
            });
          "
      
      - name: Template Repository Validation
        run: |
          cd server
          echo "üîç Testing Template Repository functionality..."
          
          node -e "
            async function testTemplateRepository() {
              // Use dynamic imports for ES modules
              const { TemplateRepositoryBuilder } = await import('./dist/utils/template-repository.js');
              
              console.log('‚úÖ Template Repository imported successfully');
            
            // Test repository building
            const repository = TemplateRepositoryBuilder.buildRepository();
            
            console.log('‚úÖ Template Repository built successfully');
            console.log('Templates count:', repository.templates.length);
            console.log('Categories count:', repository.categories.length);
            
            // Validate repository structure
            if (!repository.templates || !repository.categories) {
              throw new Error('Invalid repository structure');
            }
            
            if (repository.templates.length < 10) {
              throw new Error(\`Insufficient templates: \${repository.templates.length} (expected at least 10)\`);
            }
            
            if (repository.categories.length < 5) {
              throw new Error(\`Insufficient categories: \${repository.categories.length} (expected at least 5)\`);
            }
            
            // Validate template quality
            let validTemplates = 0;
            for (const template of repository.templates.slice(0, 5)) {
              if (template.content && template.cageerfScore && template.cageerfScore > 0.6) {
                validTemplates++;
                console.log(\`‚úÖ Template '\${template.name}' validation passed (score: \${template.cageerfScore})\`);
              }
            }
            
            if (validTemplates < 4) {
              throw new Error(\`Insufficient high-quality templates: \${validTemplates}/5\`);
            }
            
            console.log('üéâ Template Repository validation successful!');
            }
            
            testTemplateRepository().catch(error => {
              console.error('‚ùå Template Repository validation failed:', error.message);
              process.exit(1);
            });
          "
      
      - name: MCP Tools Integration Validation
        run: |
          cd server
          echo "üîç Testing MCP Tools integration..."
          
          node -e "
            async function testMcpToolsIntegration() {
              // Use dynamic imports for ES modules
              const { TemplateGenerationTools } = await import('./dist/mcp-tools/template-generation-tools.js');
              const { MockLogger } = await import('./dist/utils/index.js');
              
              console.log('‚úÖ Template Generation Tools imported successfully');
            
            // Mock MCP server for testing
            const mockMcpServer = {
              registeredTools: [],
              tool: function(name, description, schema) {
                this.registeredTools.push({ name, description, schema });
                console.log(\`üîß Mock registered tool: \${name}\`);
              }
            };
            
            // Test tools initialization
            const logger = new MockLogger();
            const tools = new TemplateGenerationTools(logger, mockMcpServer);
            
            console.log('‚úÖ Template Generation Tools instantiated');
            
            // Test tool registration
            tools.registerAllTools();
            
            console.log('‚úÖ All tools registered successfully');
            console.log('Registered tools count:', mockMcpServer.registeredTools.length);
            
            // Validate expected tools are registered
            const expectedTools = ['generate_template', 'enhance_template', 'get_template_categories', 'get_template_patterns'];
            const registeredNames = mockMcpServer.registeredTools.map(t => t.name);
            
            for (const expectedTool of expectedTools) {
              if (!registeredNames.includes(expectedTool)) {
                throw new Error(\`Missing expected MCP tool: \${expectedTool}\`);
              }
              console.log(\`‚úÖ Tool '\${expectedTool}' registered successfully\`);
            }
            
            if (mockMcpServer.registeredTools.length !== expectedTools.length) {
              console.log('‚ÑπÔ∏è  Additional tools registered:', registeredNames.filter(name => !expectedTools.includes(name)));
            }
            
              console.log('üéâ MCP Tools integration validation successful!');
            }
            
            testMcpToolsIntegration().catch(error => {
              console.error('‚ùå MCP Tools integration validation failed:', error.message);
              process.exit(1);
            });
          "
      
      - name: Semantic Analyzer CAGEERF Integration Validation
        run: |
          cd server
          echo "üîç Testing Semantic Analyzer CAGEERF integration..."
          
          node -e "
            async function testSemanticAnalyzer() {
              // Use dynamic imports for ES modules
              const { SemanticAnalyzer } = await import('./dist/utils/semanticAnalyzer.js');
              const { MockLogger } = await import('./dist/utils/index.js');
              
              console.log('‚úÖ Semantic Analyzer imported successfully');
            
            // Test analyzer initialization
            const logger = new MockLogger();
            const analyzer = new SemanticAnalyzer(logger);
            
            console.log('‚úÖ Semantic Analyzer instantiated');
            
            // Test CAGEERF-enhanced classification
            const testPrompt = {
              id: 'test-prompt-001',
              name: 'Test Analysis Prompt',
              content: 'Analyze the given data context, establish clear goals, execute systematic evaluation, and refine the framework based on results.',
              description: 'A comprehensive analysis prompt with CAGEERF methodology'
            };
            
            const classification = analyzer.classifyPrompt(testPrompt);
            
            console.log('‚úÖ Prompt classification completed');
            console.log('Execution type:', classification.executionType);
            console.log('Confidence:', classification.confidence);
            console.log('CAGEERF analysis available:', !!classification.cageerfAnalysis);
            console.log('Framework compliance:', classification.frameworkCompliance);
            
            // Validate enhanced classification structure
            if (!classification.cageerfAnalysis || classification.frameworkCompliance === undefined) {
              throw new Error('Missing CAGEERF integration in semantic analysis');
            }
            
            if (classification.cageerfAnalysis.frameworkScore < 0 || classification.cageerfAnalysis.frameworkScore > 1) {
              throw new Error(\`Invalid framework score: \${classification.cageerfAnalysis.frameworkScore}\`);
            }
            
            console.log('‚úÖ CAGEERF integration validated');
            console.log('Framework score:', classification.cageerfAnalysis.frameworkScore);
            console.log('Compliance components:', Object.keys(classification.cageerfAnalysis.compliance).length);
            
              console.log('üéâ Semantic Analyzer CAGEERF integration validation successful!');
            }
            
            testSemanticAnalyzer().catch(error => {
              console.error('‚ùå Semantic Analyzer CAGEERF integration validation failed:', error.message);
              process.exit(1);
            });
          "
      
      - name: Integration Test - End-to-End CAGEERF Workflow
        run: |
          cd server
          echo "üîç Running end-to-end CAGEERF workflow test..."
          
          node -e "
            async function endToEndTest() {
              // Use dynamic imports for ES modules
              const { CAGEERFAnalyzer } = await import('./dist/utils/cageerf-analyzer.js');
              const { TemplateGenerator } = await import('./dist/utils/template-generator.js');
              const { SemanticAnalyzer } = await import('./dist/utils/semanticAnalyzer.js');
              const { MockLogger } = await import('./dist/utils/index.js');
              
              console.log('üîÑ Starting end-to-end CAGEERF workflow test...');
            
            // Step 1: Analyze a prompt with CAGEERF
            const analyzer = new CAGEERFAnalyzer();
            const testContent = 'Create a data analysis framework that establishes context, performs systematic analysis, defines clear goals, executes validation procedures, evaluates results comprehensively, and refines the methodology based on feedback.';
            
            const cageerfAnalysis = analyzer.analyzePrompt(testContent);
            console.log('‚úÖ Step 1: CAGEERF analysis completed');
            console.log('   Framework score:', cageerfAnalysis.frameworkScore.toFixed(3));
            
            // Step 2: Generate enhanced template based on analysis
            const generator = new TemplateGenerator();
            const templateRequest = {
              useCase: 'Enhanced Analysis Framework',
              domain: 'Data Science',
              complexity: 'advanced',
              frameworkEmphasis: {
                context: cageerfAnalysis.compliance.context.confidence > 0.5,
                analysis: cageerfAnalysis.compliance.analysis.confidence > 0.5,
                goals: cageerfAnalysis.compliance.goals.confidence > 0.5,
                execution: cageerfAnalysis.compliance.execution.confidence > 0.5,
                evaluation: cageerfAnalysis.compliance.evaluation.confidence > 0.5,
                refinement: cageerfAnalysis.compliance.refinement.confidence > 0.5,
                framework: cageerfAnalysis.compliance.framework.confidence > 0.5
              },
              templateStyle: 'professional'
            };
            
            const generatedTemplate = generator.generateTemplate(templateRequest);
            console.log('‚úÖ Step 2: Template generation completed');
            console.log('   Template CAGEERF score:', generatedTemplate.cageerfScore.toFixed(3));
            
            // Step 3: Classify the generated template
            const semanticAnalyzer = new SemanticAnalyzer(new MockLogger());
            const templatePrompt = {
              id: 'generated-template-001',
              name: 'Generated CAGEERF Template',
              content: generatedTemplate.content,
              description: 'Template generated using CAGEERF methodology'
            };
            
            const classification = semanticAnalyzer.classifyPrompt(templatePrompt);
            console.log('‚úÖ Step 3: Semantic classification completed');
            console.log('   Classification type:', classification.executionType);
            console.log('   Enhanced framework compliance:', classification.frameworkCompliance.toFixed(3));
            
            // Validation: Ensure improvement through the workflow
            const improvementThreshold = 0.1;
            const finalScore = classification.frameworkCompliance;
            const initialScore = cageerfAnalysis.frameworkScore;
            
            console.log('üìä Workflow validation:');
            console.log('   Initial CAGEERF score:', initialScore.toFixed(3));
            console.log('   Generated template score:', generatedTemplate.cageerfScore.toFixed(3));
            console.log('   Final classification score:', finalScore.toFixed(3));
            
            if (generatedTemplate.cageerfScore >= initialScore - 0.05) {
              console.log('‚úÖ Template generation maintained/improved CAGEERF compliance');
            } else {
              throw new Error('Template generation degraded CAGEERF compliance');
            }
            
            if (finalScore >= generatedTemplate.cageerfScore - 0.05) {
              console.log('‚úÖ Semantic analysis maintained template quality');
            } else {
              throw new Error('Semantic analysis degraded template quality');
            }
            
              console.log('üéâ End-to-end CAGEERF workflow validation successful!');
              console.log('   All components working together effectively');
              console.log('   Framework maintains quality and consistency');
            }
            
            endToEndTest().catch(error => {
              console.error('‚ùå End-to-end CAGEERF workflow test failed:', error.message);
              process.exit(1);
            });
          "
      
      - name: Performance Benchmark
        run: |
          cd server
          echo "üîç Running CAGEERF performance benchmarks..."
          
          node -e "
            async function performanceBenchmark() {
              // Use dynamic imports for ES modules
              const { CAGEERFAnalyzer } = await import('./dist/utils/cageerf-analyzer.js');
              const { TemplateGenerator } = await import('./dist/utils/template-generator.js');
              
              console.log('‚è±Ô∏è  Starting performance benchmarks...');
            
            const analyzer = new CAGEERFAnalyzer();
            const generator = new TemplateGenerator();
            
            // Benchmark 1: Analysis performance
            const testPrompts = [
              'Simple analysis task with basic requirements',
              'Complex multi-faceted analysis requiring comprehensive context evaluation, systematic goal setting, detailed execution planning, thorough evaluation criteria, and iterative refinement processes within a structured methodological framework',
              'Medium complexity prompt with some CAGEERF elements including context and analysis components'
            ];
            
            console.log('üìä Analysis Performance:');
            for (let i = 0; i < testPrompts.length; i++) {
              const start = Date.now();
              const analysis = analyzer.analyzePrompt(testPrompts[i]);
              const duration = Date.now() - start;
              console.log(\`   Prompt \${i + 1}: \${duration}ms (score: \${analysis.frameworkScore.toFixed(3)})\`);
              
              if (duration > 1000) {
                console.log(\`‚ö†Ô∏è  Warning: Analysis took \${duration}ms (threshold: 1000ms)\`);
              }
            }
            
            // Benchmark 2: Template generation performance
            console.log('üìä Template Generation Performance:');
            const complexities = ['simple', 'intermediate', 'advanced'];
            
            for (const complexity of complexities) {
              const start = Date.now();
              const template = generator.generateTemplate({
                useCase: 'Performance Test',
                domain: 'Testing',
                complexity: complexity,
                frameworkEmphasis: {
                  context: true, analysis: true, goals: true,
                  execution: true, evaluation: true, refinement: true, framework: true
                },
                templateStyle: 'structured'
              });
              const duration = Date.now() - start;
              console.log(\`   \${complexity}: \${duration}ms (length: \${template.content.length}, score: \${template.cageerfScore.toFixed(3)})\`);
              
              if (duration > 2000) {
                console.log(\`‚ö†Ô∏è  Warning: Generation took \${duration}ms (threshold: 2000ms)\`);
              }
            }
            
              console.log('‚úÖ Performance benchmarks completed successfully');
            }
            
            performanceBenchmark().catch(error => {
              console.error('‚ùå Performance benchmarks failed:', error.message);
              process.exit(1);
            });
          "